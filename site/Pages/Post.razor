@inject HttpClient Http
@inject IJSRuntime JsRuntime
@page "/post/{Id}"
@using Markdig

@code {

    [Parameter]
    public string? Id { get; set; }

    string? _content;

    protected override async Task OnParametersSetAsync()
    {
        var markdown = await Http.GetStringAsync($"https://raw.githubusercontent.com/adam-drewery/blog/main/content/{Id}.md")
                       ?? throw new InvalidOperationException("Failed to get blog content");

        _content = Markdown.ToHtml(markdown);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("fitImages");
        await JsRuntime.InvokeVoidAsync("highlightCode");
        await JsRuntime.InvokeVoidAsync("loadUtterances");
    }

}

<div class="page-wrapper">
    <section class="pb-5">
        <div class="container">
            <a href="/" class="btn btn-outline-custom">
                <i class="mdi mdi-step-backward"></i>
                Go back
                @{ var sourceUrl = $"https://github.com/adam-drewery/blog/blob/main/content/{Id}.md"; }
            </a><a href="@sourceUrl" class="btn btn-outline-custom" style="margin-left: 20px">
                <i class="mdi mdi-github-box"></i>
                View Source
            </a>
            <div class="row pt-5">
                <div class="col-xl-8">
                    @if (_content != null)
                    {
                        @((MarkupString)_content)
                    }
                </div>
                <div id="comments" class="col-xl-8"></div>
            </div>
        </div>
    </section>
</div>